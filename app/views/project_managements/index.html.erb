<div class="container-fluid">
  <div class="row">
    <div class="col-md-12">
      <div class="row">
        <div class="col-12 text-left mb-4">
          <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#boardModal">New Board</button>
        </div>
      </div>
      <div class="row track">
        <!-- Boards will be dynamically added here -->
      </div>
    </div>
  </div>
</div>

<!-- New Board Modal -->
<div class="modal fade" id="boardModal" tabindex="-1" role="dialog" aria-labelledby="boardModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="boardModalLabel">New Board</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="boardForm">
        <div class="modal-body">
          <div class="form-group">
            <label for="boardTitle">Title</label>
            <input type="text" class="form-control" id="boardTitle" required>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Submit</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- New Task Modal -->
<div class="modal fade" id="taskModal" tabindex="-1" role="dialog" aria-labelledby="taskModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="taskModalLabel">New Task</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="taskForm">
        <div class="modal-body">
          <div class="form-group">
            <label for="taskName">Name</label>
            <input type="text" class="form-control" id="taskName" required>
          </div>
          <div class="form-group">
            <label for="taskDescription">Description</label>
            <textarea class="form-control" id="taskDescription" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="taskDate">Date</label>
            <input type="date" class="form-control" id="taskDate" required>
          </div>
          <div class="form-group">
            <label for="taskPriority">Priority</label>
            <select class="form-control" id="taskPriority" required>
              <option value="0">Low</option>
              <option value="1">High</option>
              <option value="2">Critical</option>
            </select>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Submit</button>
        </div>
      </form>
    </div>
  </div>
</div>


<script>
    let boards = [];
    const colors = ['bg-primary', 'bg-success', 'bg-warning', 'bg-info', 'bg-danger'];

    function renderBoards() {
        const track = document.querySelector('.track');
        track.innerHTML = '';
        boards.forEach((board, boardIndex) => {
            const card = document.createElement('div');
            card.className = 'bg-transparent shadow-none mr-3 w-25 iq-card';

            const cardHeader = document.createElement('div');
            cardHeader.className = `iq-card-header d-flex justify-content-between ${board.color}`;
            const headerTitle = document.createElement('h5');
            headerTitle.className = 'text-white';
            headerTitle.innerText = board.title;
            const headerAction = document.createElement('i');
            headerAction.className = 'ri-ball-pen-line mr-0 font-size-18';
            headerAction.setAttribute('role', 'button');
            headerAction.setAttribute('tabindex', '0');
            headerAction.onclick = () => editBoard(boardIndex);

            cardHeader.appendChild(headerTitle);
            cardHeader.appendChild(headerAction);

            const cardBody = document.createElement('div');
            cardBody.className = 'iq-card-body pro-bg-card';

            board.list.forEach((task, taskIndex) => {
                const taskCard = document.createElement('div');
                taskCard.className = 'iq-card';

                const taskCardHeader = document.createElement('div');
                taskCardHeader.className = 'iq-card-header d-flex justify-content-between pro-task-bg-card';
                const taskHeaderTitle = document.createElement('div');
                taskHeaderTitle.className = 'iq-header-title';
                const taskTitle = document.createElement('h5');
                taskTitle.className = 'card-title text-muted';
                taskTitle.innerText = task.name;
                const taskDate = document.createElement('h6');
                taskDate.className = 'text-muted';
                taskDate.innerText = task.date;
                taskHeaderTitle.appendChild(taskTitle);
                taskHeaderTitle.appendChild(taskDate);
                const taskHeaderToolbar = document.createElement('div');
                taskHeaderToolbar.className = 'iq-card-header-toolbar d-flex align-items-center';

                // Add badges for different task statuses
                const badges = ['Low', 'High', 'Critical'];
                const badgeClasses = ['bg-primary', 'bg-warning', 'bg-danger'];
                const badgeIndex = task.status >= 0 && task.status < badges.length ? task.status : 0;
                const badge = document.createElement('a');
                badge.className = `badge ${badgeClasses[badgeIndex]} mr-2 p-2`;
                badge.href = '#';
                badge.innerText = badges[badgeIndex];
                taskHeaderToolbar.appendChild(badge);

                taskCardHeader.appendChild(taskHeaderTitle);
                taskCardHeader.appendChild(taskHeaderToolbar);

                const taskCardBody = document.createElement('div');
                taskCardBody.className = 'iq-card-body pro-task-bg-card';
                const taskDescription = document.createElement('p');
                taskDescription.className = 'font-size-12';
                taskDescription.innerText = task.description;

                // Add icons here if needed

                taskCardBody.appendChild(taskDescription);

                // Add progress bars here if needed

                taskCard.appendChild(taskCardHeader);
                taskCard.appendChild(taskCardBody);

                cardBody.appendChild(taskCard);
            });

            const addTaskButton = document.createElement('button');
            addTaskButton.type = 'button';
            addTaskButton.className = 'btn iq-bg-primary btn-lg btn-block';
            addTaskButton.innerText = 'Add Item';
            addTaskButton.onclick = () => addTask(boardIndex);

            card.appendChild(cardHeader);
            card.appendChild(cardBody);
            card.appendChild(addTaskButton);

            track.appendChild(card);
        });
    }


    document.getElementById('boardForm').addEventListener('submit', (event) => {
        event.preventDefault();
        const boardTitle = document.getElementById('boardTitle').value;
        const newBoard = {
            id: boards.length,
            title: boardTitle,
            color: colors[Math.floor(Math.random() * colors.length)],
            list: []
        };
        boards.push(newBoard);
        $('#boardModal').modal('hide');
        renderBoards();
    });

    document.getElementById('taskForm').addEventListener('submit', (event) => {
        event.preventDefault();
        const taskName = document.getElementById('taskName').value;
        const taskDescription = document.getElementById('taskDescription').value;
        const taskDate = document.getElementById('taskDate').value;
        const taskPriority = document.getElementById('taskPriority').value;
        const boardIndex = document.getElementById('taskForm').dataset.boardIndex;

        const newTask = {
            id: boards[boardIndex].list.length,
            name: taskName,
            description: taskDescription,
            date: taskDate,
            status: taskPriority
        };
        boards[boardIndex].list.push(newTask);
        $('#taskModal').modal('hide');
        renderBoards();
    });

    function addTask(boardIndex) {
        document.getElementById('taskForm').reset();
        document.getElementById('taskForm').dataset.boardIndex = boardIndex;
        $('#taskModal').modal('show');
    }

    function editBoard(boardIndex) {
        const board = boards[boardIndex];
        document.getElementById('boardTitle').value = board.title;
        $('#boardModal').modal('show');
    }

    renderBoards();


</script>
<style>
    .track {
        display: flex;
        flex-wrap: wrap;
    }
    .card.pro-bg-card {
        margin-right: 1rem;
        margin-bottom: 1rem;
        width: calc(25% - 1rem);
    }
    .card-body.pro-task-bg-card {
        padding: 0.5rem;
    }
    .card-header.d-flex.justify-content-between.align-items-center {
        padding: 0.5rem 1rem;
    }
    .modal-header .close {
        margin: -1rem -1rem -1rem auto;
    }
    .badge {
        padding: 0.5rem;
    }
</style>